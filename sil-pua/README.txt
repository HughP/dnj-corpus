At the time of writing, Doulos SIL and Charis SIL *do* support
Unicode 8.0.  

The Unicode 9.0 standard did not include any changes to SIL's  
Private Use Area. 

The Unicode 8.0 standard includes 1 additional character  
that was previously allocated to a codepoint in the Private Use Area 
by SIL's PUA committee. 

The Unicode 7.0 standard includes 1 additional character  
that was previously allocated to a codepoint in the Private Use Area 
by SIL's PUA committee. With the latest release of SIL's fonts,
PUA characters that were added to Unicode 6.1 and earlier are now
strongly deprecated. The fonts exhibit white on black glyphs.
All processes (input methods, mappings) that create Unicode data 
should be revised to generate the proper Unicode values instead of 
PUA codes.

If you have data that contains these PUA codes, it should be updated
by replacing each PUA character with its official Unicode
counterpart. This will facilitate data interchange and the use of
standard fonts and software.

The Unicode 6.1 standard includes 1 additional character (219 total) 
that was previously allocated to a codepoint in the Private Use Area 
by SIL's PUA committee. That PUA code was (and is) supported in 
versions of the Doulos SIL font, and generated by Keyman and other 
input methods and by legacy-to-Unicode mappings created prior to the 
release of Unicode 6.1.

The Unicode 6.0 standard includes 4 additional characters (218 total) 
that were previously allocated to codepoints in the Private Use Area 
by SIL's PUA committee. Those PUA codes were (and are) supported in 
versions of the Doulos SIL font, and generated by Keyman and other 
input methods and by legacy-to-Unicode mappings created prior to the 
release of Unicode 6.0.

The Unicode 5.2 standard includes 2 additional characters (214 total) 
that were previously allocated to codepoints in the Private Use Area 
by SIL's PUA committee. Those PUA codes were (and are) supported in 
versions of the Doulos SIL font, and generated by Keyman and other 
input methods and by legacy-to-Unicode mappings created prior to the 
release of Unicode 5.2.


The Unicode 5.1 standard includes 21 additional characters (212 total) 
that were previously allocated to codepoints in the Private Use Area 
by SIL's PUA committee. Those PUA codes were (and are) supported in 
versions of the Doulos SIL font, and generated by Keyman and other 
input methods and by legacy-to-Unicode mappings created prior to the 
release of Unicode 5.1.

The Unicode 5.0 standard includes 46 additional characters (191
total) that were previously allocated to codepoints in the Private
Use Area by SIL's PUA committee. Those PUA codes were (and are)
supported in versions of the Doulos SIL font, and generated by
Keyman and other input methods and by legacy-to-Unicode mappings
created prior to the release of Unicode 5.0.

The Unicode 4.1 standard includes 117 additional characters (145
total) that were previously allocated to codepoints in the Private
Use Area by SIL's PUA committee. Those PUA codes were (and are)
supported in versions of the Doulos SIL font, and generated by
Keyman and other input methods and by legacy-to-Unicode mappings
created prior to the release of Unicode 4.1.

The Unicode 4.0 standard includes 28 characters that were previously
allocated to codepoints in the Private Use Area by SIL's PUA
committee. Those PUA codes were supported in pre-release versions of
the Doulos SIL font, and generated by Keyman and other input methods
and by legacy-to-Unicode mappings created prior to the release of
Unicode 4.0.

The first official release of Doulos SIL, however, supports the
official Unicode 4.0 code, and these will be the character codes
supported in other fonts in the future. All processes (input
methods, mappings) that create Unicode data should be revised to
generate the proper Unicode values instead of PUA codes.

If you have data that contains these PUA codes, it should be updated
by replacing each PUA character with its official Unicode
counterpart. This will facilitate data interchange and the use of
standard fonts and software.

A TECkit mapping file to make the necessary changes has been created
and is provided as a convenience. The mapping description (source)
is found in "SILPUAtoUnicode61.map", and a compiled version that can
be used by the TECkit library is provided in
"SILPUAtoUnicode61.tec". This mapping can be applied to plain-text
files by the TxtConv.exe command-line tool; it can also be used
within Microsoft Word through the EncCnvtrs package (configuring it
as a Unicode <> Unicode transliteration process).

Note that some TECkit-based tools (such as the DropTEC and SFConv
utilities) cannot use a Unicode <> Unicode mapping like this, as
they assume that one side of the mapping must be a legacy byte
encoding.

TECkit library and tools:
	http://scripts.sil.org/TECkit

EncCnvtrs package for MS Word:
	http://scripts.sil.org/EncCnvtrs

(LE 2014-09-29)
(LP 2012-02-07)
(LP 2010-03-21)
(LP 2009-10-12)
(LP 2008-02-12)
(LP 2006-08-14)
(JK 2004-07-21)
